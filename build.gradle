plugins {
	id 'java-library'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = ARTIFACT_VERSION

repositories {
	mavenCentral()
	maven {url 'https://maven.goa.systems'}
}

dependencies {

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
	testImplementation 'org.junit.platform:junit-platform-commons:1.9.2'
	
	api 'goa.systems:commons:0.3.1'
	
	/* Logging */
	implementation 'org.slf4j:slf4j-api:2.0.6'
	
	/* Specify all dependencies in configuration fullSetup that are conveniently used during development and
	   that allow execution of the application but which are optional and up to the customer to define. */
	fullSetup ('ch.qos.logback:logback-core:1.4.5') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
	fullSetup ('ch.qos.logback:logback-classic:1.4.5') {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
	
	/* QR code logic */
	api 'com.google.zxing:core:3.5.1'
	api 'com.google.zxing:javase:3.5.1'
	
	/* Batik required for testing of svg graphics */
	api 'org.apache.xmlgraphics:batik:1.16'
	api 'org.apache.xmlgraphics:batik-transcoder:1.16'
}

tasks.named('test') {
	
	useJUnitPlatform()
	
	/* Take the system property from the "gradle.properties" file or 
	from the -PSAVE_GENERATED_IMAGES=[true|false] command line parameter. */
	systemProperty 'save.generated.images', SAVE_GENERATED_IMAGES
}

task export(group: 'build', description: 'Exports application.') {
	
	dependsOn build, jar
	
	doLast {
	
		copy {
			from "build/libs"
			into "build/export/lib"
			include "*.jar"
		}
		
		copy {
			from configurations.runtimeClasspath
			from configurations.fullSetup
			into 'build/export/lib'
		}
		
		copy {
			from 'src/test/resources/logback.xml'
			into 'build/export/conf'
		}
	}
}
		
task distribute(type: Tar, group: 'build', description: 'Creates tgz distribution.') {
    dependsOn export
    from 'build/export'
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

java {
	withSourcesJar()
	withJavadocJar()
}
