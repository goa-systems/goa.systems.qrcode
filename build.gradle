plugins {
	id 'java-library'
	id 'maven-publish'
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

version = ARTIFACT_VERSION
def group = 'goa.systems'

repositories {
	mavenCentral()
	maven {url 'https://maven.goa.systems'}
}

configurations {
	testImplementation.extendsFrom(fullSetup)
}

dependencies {

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
	testImplementation 'org.junit.platform:junit-platform-commons:1.10.0'
	
	api 'goa.systems:commons:0.4.0'
	
	/* Logging */
	implementation 'org.slf4j:slf4j-api:2.0.7'
	
	/* Specify all dependencies in configuration fullSetup that are conveniently used during development and
	   that allow execution of the application but which are optional and up to the customer to define. */
	fullSetup ('ch.qos.logback:logback-core:1.4.9'){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
	fullSetup ('ch.qos.logback:logback-classic:1.4.9'){
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
	
	/* QR code logic */
	api 'com.google.zxing:core:3.5.2'
	api 'com.google.zxing:javase:3.5.2'
	
	/* Batik required for testing of svg graphics */
	api ('org.apache.xmlgraphics:batik:1.16'){
        exclude group: 'xml-apis', module: 'xml-apis'
    }
	api ('org.apache.xmlgraphics:batik-transcoder:1.16'){
        exclude group: 'xml-apis', module: 'xml-apis'
    }
}

tasks.named('test') {
	
	useJUnitPlatform()
	
	/* Take the system property from the "gradle.properties" file or 
	from the -PSAVE_GENERATED_IMAGES=[true|false] command line parameter. */
	systemProperty 'save.generated.images', SAVE_GENERATED_IMAGES
}

task export(group: 'build', description: 'Exports application.') {
	
	dependsOn build, jar
	
	doLast {
	
		copy {
			from "build/libs"
			into "build/export/lib"
			include "*.jar"
		}
		
		copy {
			from configurations.runtimeClasspath
			from configurations.fullSetup
			into 'build/export/lib'
		}
		
		copy {
			from 'src/test/resources/logback.xml'
			into 'build/export/conf'
		}
		
		copy {
			from 'build/publications/maven/pom-default.xml'
			into 'build/export/conf'
		}
	}
}

task writeVariables(group: 'build', description: 'Writes variables for maven') {
	dependsOn export
	doLast {
		
		def artifact = rootProject.name.substring(group.size() + 1)
		file("build/export/vars").text = """export VERSION=${version}\nexport GROUP=${group}\nexport ARTIFACT=${artifact}"""
	}
}
		
task distribute(type: Tar, group: 'build', description: 'Creates tgz distribution.') {
    dependsOn writeVariables
    from 'build/export'
    archiveExtension = 'tar.gz'
    compression = Compression.GZIP
}

java {
	withSourcesJar()
	withJavadocJar()
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = group
			artifactId = rootProject.name.substring(group.size() + 1)
			version = version
			from components.java

			pom {
				name = 'GOA systems qrcode'
				description = 'QR code functionality library.'
			}
		}
	}
}
